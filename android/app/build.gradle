apply plugin: 'com.android.application'
apply plugin: 'com.facebook.react'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android' // Add this line to apply the Kotlin plugin

react {
    /* Uncommented configuration can be added here if necessary */
}

def enableProguardInReleaseBuilds = true
def jscFlavor = 'org.webkit:android-jsc:+' // Use JSC unless Hermes is enabled

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
     
    namespace "com.STJ"
    defaultConfig {
        applicationId "com.STJ"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 11
        versionName "1.0.11"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation platform('com.google.firebase:firebase-bom:32.3.1')

    // Firebase dependencies (simplified using BOM)
    implementation("com.google.firebase:firebase-analytics")
    implementation("com.google.firebase:firebase-auth")
    implementation("com.google.firebase:firebase-firestore")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

// Add explicit dependency to prevent lintAnalyzeDebug issue
tasks.whenTaskAdded { task ->
    if (task.name == 'lintAnalyzeDebug') {
        task.dependsOn(':app:copyReactNativeVectorIconFonts')
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
project.ext.vectoricons = [
    iconFontNames: ['MaterialIcons.ttf', 'EvilIcons.ttf'] // Specify custom fonts
]

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
